// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vicanso/elite/ent/chapter"
	"github.com/vicanso/elite/ent/predicate"
)

// ChapterUpdate is the builder for updating Chapter entities.
type ChapterUpdate struct {
	config
	hooks    []Hook
	mutation *ChapterMutation
}

// Where adds a new predicate for the ChapterUpdate builder.
func (cu *ChapterUpdate) Where(ps ...predicate.Chapter) *ChapterUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetNovel sets the "novel" field.
func (cu *ChapterUpdate) SetNovel(i int) *ChapterUpdate {
	cu.mutation.ResetNovel()
	cu.mutation.SetNovel(i)
	return cu
}

// AddNovel adds i to the "novel" field.
func (cu *ChapterUpdate) AddNovel(i int) *ChapterUpdate {
	cu.mutation.AddNovel(i)
	return cu
}

// SetNo sets the "no" field.
func (cu *ChapterUpdate) SetNo(i int) *ChapterUpdate {
	cu.mutation.ResetNo()
	cu.mutation.SetNo(i)
	return cu
}

// AddNo adds i to the "no" field.
func (cu *ChapterUpdate) AddNo(i int) *ChapterUpdate {
	cu.mutation.AddNo(i)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ChapterUpdate) SetTitle(s string) *ChapterUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetContent sets the "content" field.
func (cu *ChapterUpdate) SetContent(s string) *ChapterUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableContent(s *string) *ChapterUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *ChapterUpdate) ClearContent() *ChapterUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetWordCount sets the "word_count" field.
func (cu *ChapterUpdate) SetWordCount(i int) *ChapterUpdate {
	cu.mutation.ResetWordCount()
	cu.mutation.SetWordCount(i)
	return cu
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (cu *ChapterUpdate) SetNillableWordCount(i *int) *ChapterUpdate {
	if i != nil {
		cu.SetWordCount(*i)
	}
	return cu
}

// AddWordCount adds i to the "word_count" field.
func (cu *ChapterUpdate) AddWordCount(i int) *ChapterUpdate {
	cu.mutation.AddWordCount(i)
	return cu
}

// ClearWordCount clears the value of the "word_count" field.
func (cu *ChapterUpdate) ClearWordCount() *ChapterUpdate {
	cu.mutation.ClearWordCount()
	return cu
}

// Mutation returns the ChapterMutation object of the builder.
func (cu *ChapterUpdate) Mutation() *ChapterMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChapterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChapterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChapterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChapterUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := chapter.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ChapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chapter.Table,
			Columns: chapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chapter.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chapter.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.Novel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNovel,
		})
	}
	if value, ok := cu.mutation.AddedNovel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNovel,
		})
	}
	if value, ok := cu.mutation.No(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNo,
		})
	}
	if value, ok := cu.mutation.AddedNo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNo,
		})
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chapter.FieldTitle,
		})
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chapter.FieldContent,
		})
	}
	if cu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chapter.FieldContent,
		})
	}
	if value, ok := cu.mutation.WordCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldWordCount,
		})
	}
	if value, ok := cu.mutation.AddedWordCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldWordCount,
		})
	}
	if cu.mutation.WordCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: chapter.FieldWordCount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ChapterUpdateOne is the builder for updating a single Chapter entity.
type ChapterUpdateOne struct {
	config
	hooks    []Hook
	mutation *ChapterMutation
}

// SetNovel sets the "novel" field.
func (cuo *ChapterUpdateOne) SetNovel(i int) *ChapterUpdateOne {
	cuo.mutation.ResetNovel()
	cuo.mutation.SetNovel(i)
	return cuo
}

// AddNovel adds i to the "novel" field.
func (cuo *ChapterUpdateOne) AddNovel(i int) *ChapterUpdateOne {
	cuo.mutation.AddNovel(i)
	return cuo
}

// SetNo sets the "no" field.
func (cuo *ChapterUpdateOne) SetNo(i int) *ChapterUpdateOne {
	cuo.mutation.ResetNo()
	cuo.mutation.SetNo(i)
	return cuo
}

// AddNo adds i to the "no" field.
func (cuo *ChapterUpdateOne) AddNo(i int) *ChapterUpdateOne {
	cuo.mutation.AddNo(i)
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ChapterUpdateOne) SetTitle(s string) *ChapterUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetContent sets the "content" field.
func (cuo *ChapterUpdateOne) SetContent(s string) *ChapterUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableContent(s *string) *ChapterUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *ChapterUpdateOne) ClearContent() *ChapterUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetWordCount sets the "word_count" field.
func (cuo *ChapterUpdateOne) SetWordCount(i int) *ChapterUpdateOne {
	cuo.mutation.ResetWordCount()
	cuo.mutation.SetWordCount(i)
	return cuo
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (cuo *ChapterUpdateOne) SetNillableWordCount(i *int) *ChapterUpdateOne {
	if i != nil {
		cuo.SetWordCount(*i)
	}
	return cuo
}

// AddWordCount adds i to the "word_count" field.
func (cuo *ChapterUpdateOne) AddWordCount(i int) *ChapterUpdateOne {
	cuo.mutation.AddWordCount(i)
	return cuo
}

// ClearWordCount clears the value of the "word_count" field.
func (cuo *ChapterUpdateOne) ClearWordCount() *ChapterUpdateOne {
	cuo.mutation.ClearWordCount()
	return cuo
}

// Mutation returns the ChapterMutation object of the builder.
func (cuo *ChapterUpdateOne) Mutation() *ChapterMutation {
	return cuo.mutation
}

// Save executes the query and returns the updated Chapter entity.
func (cuo *ChapterUpdateOne) Save(ctx context.Context) (*Chapter, error) {
	var (
		err  error
		node *Chapter
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChapterUpdateOne) SaveX(ctx context.Context) *Chapter {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChapterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChapterUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := chapter.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ChapterUpdateOne) sqlSave(ctx context.Context) (_node *Chapter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chapter.Table,
			Columns: chapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chapter.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Chapter.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chapter.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.Novel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNovel,
		})
	}
	if value, ok := cuo.mutation.AddedNovel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNovel,
		})
	}
	if value, ok := cuo.mutation.No(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNo,
		})
	}
	if value, ok := cuo.mutation.AddedNo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldNo,
		})
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chapter.FieldTitle,
		})
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chapter.FieldContent,
		})
	}
	if cuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: chapter.FieldContent,
		})
	}
	if value, ok := cuo.mutation.WordCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldWordCount,
		})
	}
	if value, ok := cuo.mutation.AddedWordCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chapter.FieldWordCount,
		})
	}
	if cuo.mutation.WordCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: chapter.FieldWordCount,
		})
	}
	_node = &Chapter{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
