// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vicanso/elite/ent/novelsource"
)

// NovelSource is the model entity for the NovelSource schema.
type NovelSource struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty" sql:"updated_at"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Source holds the value of the "source" field.
	Source int `json:"source,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int `json:"sourceID,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelSource) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelsource.FieldID, novelsource.FieldSource, novelsource.FieldSourceID, novelsource.FieldStatus:
			values[i] = &sql.NullInt64{}
		case novelsource.FieldName, novelsource.FieldAuthor:
			values[i] = &sql.NullString{}
		case novelsource.FieldCreatedAt, novelsource.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelSource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelSource fields.
func (ns *NovelSource) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelsource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ns.ID = int(value.Int64)
		case novelsource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ns.CreatedAt = value.Time
			}
		case novelsource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ns.UpdatedAt = value.Time
			}
		case novelsource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ns.Name = value.String
			}
		case novelsource.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				ns.Author = value.String
			}
		case novelsource.FieldSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ns.Source = int(value.Int64)
			}
		case novelsource.FieldSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				ns.SourceID = int(value.Int64)
			}
		case novelsource.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ns.Status = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NovelSource.
// Note that you need to call NovelSource.Unwrap() before calling this method if this NovelSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NovelSource) Update() *NovelSourceUpdateOne {
	return (&NovelSourceClient{config: ns.config}).UpdateOne(ns)
}

// Unwrap unwraps the NovelSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ns *NovelSource) Unwrap() *NovelSource {
	tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelSource is not a transactional entity")
	}
	ns.config.driver = tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NovelSource) String() string {
	var builder strings.Builder
	builder.WriteString("NovelSource(")
	builder.WriteString(fmt.Sprintf("id=%v", ns.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ns.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ns.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ns.Name)
	builder.WriteString(", author=")
	builder.WriteString(ns.Author)
	builder.WriteString(", source=")
	builder.WriteString(fmt.Sprintf("%v", ns.Source))
	builder.WriteString(", source_id=")
	builder.WriteString(fmt.Sprintf("%v", ns.SourceID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ns.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NovelSources is a parsable slice of NovelSource.
type NovelSources []*NovelSource

func (ns NovelSources) config(cfg config) {
	for _i := range ns {
		ns[_i].config = cfg
	}
}
