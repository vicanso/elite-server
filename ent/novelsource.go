// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vicanso/elite/ent/novelsource"
)

// NovelSource is the model entity for the NovelSource schema.
type NovelSource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Source holds the value of the "source" field.
	Source int `json:"source,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID int `json:"sourceID,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelSource) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // name
		&sql.NullString{}, // author
		&sql.NullInt64{},  // source
		&sql.NullInt64{},  // source_id
		&sql.NullString{}, // description
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelSource fields.
func (ns *NovelSource) assignValues(values ...interface{}) error {
	if m, n := len(values), len(novelsource.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ns.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		ns.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		ns.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		ns.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field author", values[3])
	} else if value.Valid {
		ns.Author = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field source", values[4])
	} else if value.Valid {
		ns.Source = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field source_id", values[5])
	} else if value.Valid {
		ns.SourceID = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[6])
	} else if value.Valid {
		ns.Description = value.String
	}
	return nil
}

// Update returns a builder for updating this NovelSource.
// Note that, you need to call NovelSource.Unwrap() before calling this method, if this NovelSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NovelSource) Update() *NovelSourceUpdateOne {
	return (&NovelSourceClient{config: ns.config}).UpdateOne(ns)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ns *NovelSource) Unwrap() *NovelSource {
	tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelSource is not a transactional entity")
	}
	ns.config.driver = tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NovelSource) String() string {
	var builder strings.Builder
	builder.WriteString("NovelSource(")
	builder.WriteString(fmt.Sprintf("id=%v", ns.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ns.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ns.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ns.Name)
	builder.WriteString(", author=")
	builder.WriteString(ns.Author)
	builder.WriteString(", source=")
	builder.WriteString(fmt.Sprintf("%v", ns.Source))
	builder.WriteString(", source_id=")
	builder.WriteString(fmt.Sprintf("%v", ns.SourceID))
	builder.WriteString(", description=")
	builder.WriteString(ns.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NovelSources is a parsable slice of NovelSource.
type NovelSources []*NovelSource

func (ns NovelSources) config(cfg config) {
	for _i := range ns {
		ns[_i].config = cfg
	}
}
