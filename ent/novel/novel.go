// Code generated by entc, DO NOT EDIT.

package novel

import (
	"time"
)

const (
	// Label holds the string label denoting the novel type in the database.
	Label = "novel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldWordCount holds the string denoting the word_count field in the database.
	FieldWordCount = "word_count"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldDownloads holds the string denoting the downloads field in the database.
	FieldDownloads = "downloads"
	// FieldFavorites holds the string denoting the favorites field in the database.
	FieldFavorites = "favorites"
	// FieldCover holds the string denoting the cover field in the database.
	FieldCover = "cover"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"

	// Table holds the table name of the novel in the database.
	Table = "novels"
)

// Columns holds all SQL columns for novel fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldAuthor,
	FieldSource,
	FieldStatus,
	FieldWordCount,
	FieldViews,
	FieldDownloads,
	FieldFavorites,
	FieldCover,
	FieldSummary,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	AuthorValidator func(string) error
	// SourceValidator is a validator for the "source" field. It is called by the builders before save.
	SourceValidator func(int) error
	// DefaultStatus holds the default value on creation for the status field.
	DefaultStatus int
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int) error
	// DefaultWordCount holds the default value on creation for the word_count field.
	DefaultWordCount int
	// DefaultViews holds the default value on creation for the views field.
	DefaultViews int
	// DefaultDownloads holds the default value on creation for the downloads field.
	DefaultDownloads int
	// DefaultFavorites holds the default value on creation for the favorites field.
	DefaultFavorites int
)
