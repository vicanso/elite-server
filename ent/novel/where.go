// Code generated by entc, DO NOT EDIT.

package novel

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vicanso/elite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthor), v))
	})
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// WordCount applies equality check predicate on the "word_count" field. It's identical to WordCountEQ.
func WordCount(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWordCount), v))
	})
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViews), v))
	})
}

// Downloads applies equality check predicate on the "downloads" field. It's identical to DownloadsEQ.
func Downloads(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDownloads), v))
	})
}

// Favorites applies equality check predicate on the "favorites" field. It's identical to FavoritesEQ.
func Favorites(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFavorites), v))
	})
}

// UpdatedWeight applies equality check predicate on the "updated_weight" field. It's identical to UpdatedWeightEQ.
func UpdatedWeight(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWeight), v))
	})
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthor), v))
	})
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthor), v))
	})
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthor), v...))
	})
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthor), v...))
	})
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthor), v))
	})
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthor), v))
	})
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthor), v))
	})
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthor), v))
	})
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthor), v))
	})
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthor), v))
	})
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthor), v))
	})
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthor), v))
	})
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthor), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// WordCountEQ applies the EQ predicate on the "word_count" field.
func WordCountEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWordCount), v))
	})
}

// WordCountNEQ applies the NEQ predicate on the "word_count" field.
func WordCountNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWordCount), v))
	})
}

// WordCountIn applies the In predicate on the "word_count" field.
func WordCountIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWordCount), v...))
	})
}

// WordCountNotIn applies the NotIn predicate on the "word_count" field.
func WordCountNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWordCount), v...))
	})
}

// WordCountGT applies the GT predicate on the "word_count" field.
func WordCountGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWordCount), v))
	})
}

// WordCountGTE applies the GTE predicate on the "word_count" field.
func WordCountGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWordCount), v))
	})
}

// WordCountLT applies the LT predicate on the "word_count" field.
func WordCountLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWordCount), v))
	})
}

// WordCountLTE applies the LTE predicate on the "word_count" field.
func WordCountLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWordCount), v))
	})
}

// WordCountIsNil applies the IsNil predicate on the "word_count" field.
func WordCountIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWordCount)))
	})
}

// WordCountNotNil applies the NotNil predicate on the "word_count" field.
func WordCountNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWordCount)))
	})
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldViews), v))
	})
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldViews), v))
	})
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldViews), v...))
	})
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldViews), v...))
	})
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldViews), v))
	})
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldViews), v))
	})
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldViews), v))
	})
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldViews), v))
	})
}

// ViewsIsNil applies the IsNil predicate on the "views" field.
func ViewsIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldViews)))
	})
}

// ViewsNotNil applies the NotNil predicate on the "views" field.
func ViewsNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldViews)))
	})
}

// DownloadsEQ applies the EQ predicate on the "downloads" field.
func DownloadsEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDownloads), v))
	})
}

// DownloadsNEQ applies the NEQ predicate on the "downloads" field.
func DownloadsNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDownloads), v))
	})
}

// DownloadsIn applies the In predicate on the "downloads" field.
func DownloadsIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDownloads), v...))
	})
}

// DownloadsNotIn applies the NotIn predicate on the "downloads" field.
func DownloadsNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDownloads), v...))
	})
}

// DownloadsGT applies the GT predicate on the "downloads" field.
func DownloadsGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDownloads), v))
	})
}

// DownloadsGTE applies the GTE predicate on the "downloads" field.
func DownloadsGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDownloads), v))
	})
}

// DownloadsLT applies the LT predicate on the "downloads" field.
func DownloadsLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDownloads), v))
	})
}

// DownloadsLTE applies the LTE predicate on the "downloads" field.
func DownloadsLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDownloads), v))
	})
}

// DownloadsIsNil applies the IsNil predicate on the "downloads" field.
func DownloadsIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDownloads)))
	})
}

// DownloadsNotNil applies the NotNil predicate on the "downloads" field.
func DownloadsNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDownloads)))
	})
}

// FavoritesEQ applies the EQ predicate on the "favorites" field.
func FavoritesEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFavorites), v))
	})
}

// FavoritesNEQ applies the NEQ predicate on the "favorites" field.
func FavoritesNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFavorites), v))
	})
}

// FavoritesIn applies the In predicate on the "favorites" field.
func FavoritesIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFavorites), v...))
	})
}

// FavoritesNotIn applies the NotIn predicate on the "favorites" field.
func FavoritesNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFavorites), v...))
	})
}

// FavoritesGT applies the GT predicate on the "favorites" field.
func FavoritesGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFavorites), v))
	})
}

// FavoritesGTE applies the GTE predicate on the "favorites" field.
func FavoritesGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFavorites), v))
	})
}

// FavoritesLT applies the LT predicate on the "favorites" field.
func FavoritesLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFavorites), v))
	})
}

// FavoritesLTE applies the LTE predicate on the "favorites" field.
func FavoritesLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFavorites), v))
	})
}

// FavoritesIsNil applies the IsNil predicate on the "favorites" field.
func FavoritesIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFavorites)))
	})
}

// FavoritesNotNil applies the NotNil predicate on the "favorites" field.
func FavoritesNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFavorites)))
	})
}

// UpdatedWeightEQ applies the EQ predicate on the "updated_weight" field.
func UpdatedWeightEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWeight), v))
	})
}

// UpdatedWeightNEQ applies the NEQ predicate on the "updated_weight" field.
func UpdatedWeightNEQ(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedWeight), v))
	})
}

// UpdatedWeightIn applies the In predicate on the "updated_weight" field.
func UpdatedWeightIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedWeight), v...))
	})
}

// UpdatedWeightNotIn applies the NotIn predicate on the "updated_weight" field.
func UpdatedWeightNotIn(vs ...int) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedWeight), v...))
	})
}

// UpdatedWeightGT applies the GT predicate on the "updated_weight" field.
func UpdatedWeightGT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedWeight), v))
	})
}

// UpdatedWeightGTE applies the GTE predicate on the "updated_weight" field.
func UpdatedWeightGTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedWeight), v))
	})
}

// UpdatedWeightLT applies the LT predicate on the "updated_weight" field.
func UpdatedWeightLT(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedWeight), v))
	})
}

// UpdatedWeightLTE applies the LTE predicate on the "updated_weight" field.
func UpdatedWeightLTE(v int) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedWeight), v))
	})
}

// UpdatedWeightIsNil applies the IsNil predicate on the "updated_weight" field.
func UpdatedWeightIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedWeight)))
	})
}

// UpdatedWeightNotNil applies the NotNil predicate on the "updated_weight" field.
func UpdatedWeightNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedWeight)))
	})
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCover), v))
	})
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCover), v...))
	})
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCover), v...))
	})
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCover), v))
	})
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCover), v))
	})
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCover), v))
	})
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCover), v))
	})
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCover), v))
	})
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCover), v))
	})
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCover), v))
	})
}

// CoverIsNil applies the IsNil predicate on the "cover" field.
func CoverIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCover)))
	})
}

// CoverNotNil applies the NotNil predicate on the "cover" field.
func CoverNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCover)))
	})
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCover), v))
	})
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCover), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Novel) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Novel) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Novel) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		p(s.Not())
	})
}
