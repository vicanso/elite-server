// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vicanso/elite/ent/novel"
	"github.com/vicanso/elite/ent/predicate"
)

// NovelUpdate is the builder for updating Novel entities.
type NovelUpdate struct {
	config
	hooks    []Hook
	mutation *NovelMutation
}

// Where adds a new predicate for the NovelUpdate builder.
func (nu *NovelUpdate) Where(ps ...predicate.Novel) *NovelUpdate {
	nu.mutation.predicates = append(nu.mutation.predicates, ps...)
	return nu
}

// SetStatus sets the "status" field.
func (nu *NovelUpdate) SetStatus(i int) *NovelUpdate {
	nu.mutation.ResetStatus()
	nu.mutation.SetStatus(i)
	return nu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableStatus(i *int) *NovelUpdate {
	if i != nil {
		nu.SetStatus(*i)
	}
	return nu
}

// AddStatus adds i to the "status" field.
func (nu *NovelUpdate) AddStatus(i int) *NovelUpdate {
	nu.mutation.AddStatus(i)
	return nu
}

// SetWordCount sets the "word_count" field.
func (nu *NovelUpdate) SetWordCount(i int) *NovelUpdate {
	nu.mutation.ResetWordCount()
	nu.mutation.SetWordCount(i)
	return nu
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableWordCount(i *int) *NovelUpdate {
	if i != nil {
		nu.SetWordCount(*i)
	}
	return nu
}

// AddWordCount adds i to the "word_count" field.
func (nu *NovelUpdate) AddWordCount(i int) *NovelUpdate {
	nu.mutation.AddWordCount(i)
	return nu
}

// ClearWordCount clears the value of the "word_count" field.
func (nu *NovelUpdate) ClearWordCount() *NovelUpdate {
	nu.mutation.ClearWordCount()
	return nu
}

// SetViews sets the "views" field.
func (nu *NovelUpdate) SetViews(i int) *NovelUpdate {
	nu.mutation.ResetViews()
	nu.mutation.SetViews(i)
	return nu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableViews(i *int) *NovelUpdate {
	if i != nil {
		nu.SetViews(*i)
	}
	return nu
}

// AddViews adds i to the "views" field.
func (nu *NovelUpdate) AddViews(i int) *NovelUpdate {
	nu.mutation.AddViews(i)
	return nu
}

// ClearViews clears the value of the "views" field.
func (nu *NovelUpdate) ClearViews() *NovelUpdate {
	nu.mutation.ClearViews()
	return nu
}

// SetDownloads sets the "downloads" field.
func (nu *NovelUpdate) SetDownloads(i int) *NovelUpdate {
	nu.mutation.ResetDownloads()
	nu.mutation.SetDownloads(i)
	return nu
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableDownloads(i *int) *NovelUpdate {
	if i != nil {
		nu.SetDownloads(*i)
	}
	return nu
}

// AddDownloads adds i to the "downloads" field.
func (nu *NovelUpdate) AddDownloads(i int) *NovelUpdate {
	nu.mutation.AddDownloads(i)
	return nu
}

// ClearDownloads clears the value of the "downloads" field.
func (nu *NovelUpdate) ClearDownloads() *NovelUpdate {
	nu.mutation.ClearDownloads()
	return nu
}

// SetFavorites sets the "favorites" field.
func (nu *NovelUpdate) SetFavorites(i int) *NovelUpdate {
	nu.mutation.ResetFavorites()
	nu.mutation.SetFavorites(i)
	return nu
}

// SetNillableFavorites sets the "favorites" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableFavorites(i *int) *NovelUpdate {
	if i != nil {
		nu.SetFavorites(*i)
	}
	return nu
}

// AddFavorites adds i to the "favorites" field.
func (nu *NovelUpdate) AddFavorites(i int) *NovelUpdate {
	nu.mutation.AddFavorites(i)
	return nu
}

// ClearFavorites clears the value of the "favorites" field.
func (nu *NovelUpdate) ClearFavorites() *NovelUpdate {
	nu.mutation.ClearFavorites()
	return nu
}

// SetUpdatedWeight sets the "updated_weight" field.
func (nu *NovelUpdate) SetUpdatedWeight(i int) *NovelUpdate {
	nu.mutation.ResetUpdatedWeight()
	nu.mutation.SetUpdatedWeight(i)
	return nu
}

// SetNillableUpdatedWeight sets the "updated_weight" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableUpdatedWeight(i *int) *NovelUpdate {
	if i != nil {
		nu.SetUpdatedWeight(*i)
	}
	return nu
}

// AddUpdatedWeight adds i to the "updated_weight" field.
func (nu *NovelUpdate) AddUpdatedWeight(i int) *NovelUpdate {
	nu.mutation.AddUpdatedWeight(i)
	return nu
}

// ClearUpdatedWeight clears the value of the "updated_weight" field.
func (nu *NovelUpdate) ClearUpdatedWeight() *NovelUpdate {
	nu.mutation.ClearUpdatedWeight()
	return nu
}

// SetCover sets the "cover" field.
func (nu *NovelUpdate) SetCover(s string) *NovelUpdate {
	nu.mutation.SetCover(s)
	return nu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableCover(s *string) *NovelUpdate {
	if s != nil {
		nu.SetCover(*s)
	}
	return nu
}

// ClearCover clears the value of the "cover" field.
func (nu *NovelUpdate) ClearCover() *NovelUpdate {
	nu.mutation.ClearCover()
	return nu
}

// SetSummary sets the "summary" field.
func (nu *NovelUpdate) SetSummary(s string) *NovelUpdate {
	nu.mutation.SetSummary(s)
	return nu
}

// Mutation returns the NovelMutation object of the builder.
func (nu *NovelUpdate) Mutation() *NovelMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NovelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NovelUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NovelUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NovelUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NovelUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := novel.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NovelUpdate) check() error {
	if v, ok := nu.mutation.Status(); ok {
		if err := novel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (nu *NovelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novel.Table,
			Columns: novel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: novel.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldUpdatedAt,
		})
	}
	if value, ok := nu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldStatus,
		})
	}
	if value, ok := nu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldStatus,
		})
	}
	if value, ok := nu.mutation.WordCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldWordCount,
		})
	}
	if value, ok := nu.mutation.AddedWordCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldWordCount,
		})
	}
	if nu.mutation.WordCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldWordCount,
		})
	}
	if value, ok := nu.mutation.Views(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldViews,
		})
	}
	if value, ok := nu.mutation.AddedViews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldViews,
		})
	}
	if nu.mutation.ViewsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldViews,
		})
	}
	if value, ok := nu.mutation.Downloads(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldDownloads,
		})
	}
	if value, ok := nu.mutation.AddedDownloads(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldDownloads,
		})
	}
	if nu.mutation.DownloadsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldDownloads,
		})
	}
	if value, ok := nu.mutation.Favorites(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldFavorites,
		})
	}
	if value, ok := nu.mutation.AddedFavorites(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldFavorites,
		})
	}
	if nu.mutation.FavoritesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldFavorites,
		})
	}
	if value, ok := nu.mutation.UpdatedWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldUpdatedWeight,
		})
	}
	if value, ok := nu.mutation.AddedUpdatedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldUpdatedWeight,
		})
	}
	if nu.mutation.UpdatedWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldUpdatedWeight,
		})
	}
	if value, ok := nu.mutation.Cover(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldCover,
		})
	}
	if nu.mutation.CoverCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldCover,
		})
	}
	if value, ok := nu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldSummary,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NovelUpdateOne is the builder for updating a single Novel entity.
type NovelUpdateOne struct {
	config
	hooks    []Hook
	mutation *NovelMutation
}

// SetStatus sets the "status" field.
func (nuo *NovelUpdateOne) SetStatus(i int) *NovelUpdateOne {
	nuo.mutation.ResetStatus()
	nuo.mutation.SetStatus(i)
	return nuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableStatus(i *int) *NovelUpdateOne {
	if i != nil {
		nuo.SetStatus(*i)
	}
	return nuo
}

// AddStatus adds i to the "status" field.
func (nuo *NovelUpdateOne) AddStatus(i int) *NovelUpdateOne {
	nuo.mutation.AddStatus(i)
	return nuo
}

// SetWordCount sets the "word_count" field.
func (nuo *NovelUpdateOne) SetWordCount(i int) *NovelUpdateOne {
	nuo.mutation.ResetWordCount()
	nuo.mutation.SetWordCount(i)
	return nuo
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableWordCount(i *int) *NovelUpdateOne {
	if i != nil {
		nuo.SetWordCount(*i)
	}
	return nuo
}

// AddWordCount adds i to the "word_count" field.
func (nuo *NovelUpdateOne) AddWordCount(i int) *NovelUpdateOne {
	nuo.mutation.AddWordCount(i)
	return nuo
}

// ClearWordCount clears the value of the "word_count" field.
func (nuo *NovelUpdateOne) ClearWordCount() *NovelUpdateOne {
	nuo.mutation.ClearWordCount()
	return nuo
}

// SetViews sets the "views" field.
func (nuo *NovelUpdateOne) SetViews(i int) *NovelUpdateOne {
	nuo.mutation.ResetViews()
	nuo.mutation.SetViews(i)
	return nuo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableViews(i *int) *NovelUpdateOne {
	if i != nil {
		nuo.SetViews(*i)
	}
	return nuo
}

// AddViews adds i to the "views" field.
func (nuo *NovelUpdateOne) AddViews(i int) *NovelUpdateOne {
	nuo.mutation.AddViews(i)
	return nuo
}

// ClearViews clears the value of the "views" field.
func (nuo *NovelUpdateOne) ClearViews() *NovelUpdateOne {
	nuo.mutation.ClearViews()
	return nuo
}

// SetDownloads sets the "downloads" field.
func (nuo *NovelUpdateOne) SetDownloads(i int) *NovelUpdateOne {
	nuo.mutation.ResetDownloads()
	nuo.mutation.SetDownloads(i)
	return nuo
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableDownloads(i *int) *NovelUpdateOne {
	if i != nil {
		nuo.SetDownloads(*i)
	}
	return nuo
}

// AddDownloads adds i to the "downloads" field.
func (nuo *NovelUpdateOne) AddDownloads(i int) *NovelUpdateOne {
	nuo.mutation.AddDownloads(i)
	return nuo
}

// ClearDownloads clears the value of the "downloads" field.
func (nuo *NovelUpdateOne) ClearDownloads() *NovelUpdateOne {
	nuo.mutation.ClearDownloads()
	return nuo
}

// SetFavorites sets the "favorites" field.
func (nuo *NovelUpdateOne) SetFavorites(i int) *NovelUpdateOne {
	nuo.mutation.ResetFavorites()
	nuo.mutation.SetFavorites(i)
	return nuo
}

// SetNillableFavorites sets the "favorites" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableFavorites(i *int) *NovelUpdateOne {
	if i != nil {
		nuo.SetFavorites(*i)
	}
	return nuo
}

// AddFavorites adds i to the "favorites" field.
func (nuo *NovelUpdateOne) AddFavorites(i int) *NovelUpdateOne {
	nuo.mutation.AddFavorites(i)
	return nuo
}

// ClearFavorites clears the value of the "favorites" field.
func (nuo *NovelUpdateOne) ClearFavorites() *NovelUpdateOne {
	nuo.mutation.ClearFavorites()
	return nuo
}

// SetUpdatedWeight sets the "updated_weight" field.
func (nuo *NovelUpdateOne) SetUpdatedWeight(i int) *NovelUpdateOne {
	nuo.mutation.ResetUpdatedWeight()
	nuo.mutation.SetUpdatedWeight(i)
	return nuo
}

// SetNillableUpdatedWeight sets the "updated_weight" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableUpdatedWeight(i *int) *NovelUpdateOne {
	if i != nil {
		nuo.SetUpdatedWeight(*i)
	}
	return nuo
}

// AddUpdatedWeight adds i to the "updated_weight" field.
func (nuo *NovelUpdateOne) AddUpdatedWeight(i int) *NovelUpdateOne {
	nuo.mutation.AddUpdatedWeight(i)
	return nuo
}

// ClearUpdatedWeight clears the value of the "updated_weight" field.
func (nuo *NovelUpdateOne) ClearUpdatedWeight() *NovelUpdateOne {
	nuo.mutation.ClearUpdatedWeight()
	return nuo
}

// SetCover sets the "cover" field.
func (nuo *NovelUpdateOne) SetCover(s string) *NovelUpdateOne {
	nuo.mutation.SetCover(s)
	return nuo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableCover(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetCover(*s)
	}
	return nuo
}

// ClearCover clears the value of the "cover" field.
func (nuo *NovelUpdateOne) ClearCover() *NovelUpdateOne {
	nuo.mutation.ClearCover()
	return nuo
}

// SetSummary sets the "summary" field.
func (nuo *NovelUpdateOne) SetSummary(s string) *NovelUpdateOne {
	nuo.mutation.SetSummary(s)
	return nuo
}

// Mutation returns the NovelMutation object of the builder.
func (nuo *NovelUpdateOne) Mutation() *NovelMutation {
	return nuo.mutation
}

// Save executes the query and returns the updated Novel entity.
func (nuo *NovelUpdateOne) Save(ctx context.Context) (*Novel, error) {
	var (
		err  error
		node *Novel
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NovelUpdateOne) SaveX(ctx context.Context) *Novel {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NovelUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NovelUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NovelUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := novel.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NovelUpdateOne) check() error {
	if v, ok := nuo.mutation.Status(); ok {
		if err := novel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (nuo *NovelUpdateOne) sqlSave(ctx context.Context) (_node *Novel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novel.Table,
			Columns: novel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: novel.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Novel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldUpdatedAt,
		})
	}
	if value, ok := nuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldStatus,
		})
	}
	if value, ok := nuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldStatus,
		})
	}
	if value, ok := nuo.mutation.WordCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldWordCount,
		})
	}
	if value, ok := nuo.mutation.AddedWordCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldWordCount,
		})
	}
	if nuo.mutation.WordCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldWordCount,
		})
	}
	if value, ok := nuo.mutation.Views(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldViews,
		})
	}
	if value, ok := nuo.mutation.AddedViews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldViews,
		})
	}
	if nuo.mutation.ViewsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldViews,
		})
	}
	if value, ok := nuo.mutation.Downloads(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldDownloads,
		})
	}
	if value, ok := nuo.mutation.AddedDownloads(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldDownloads,
		})
	}
	if nuo.mutation.DownloadsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldDownloads,
		})
	}
	if value, ok := nuo.mutation.Favorites(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldFavorites,
		})
	}
	if value, ok := nuo.mutation.AddedFavorites(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldFavorites,
		})
	}
	if nuo.mutation.FavoritesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldFavorites,
		})
	}
	if value, ok := nuo.mutation.UpdatedWeight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldUpdatedWeight,
		})
	}
	if value, ok := nuo.mutation.AddedUpdatedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: novel.FieldUpdatedWeight,
		})
	}
	if nuo.mutation.UpdatedWeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: novel.FieldUpdatedWeight,
		})
	}
	if value, ok := nuo.mutation.Cover(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldCover,
		})
	}
	if nuo.mutation.CoverCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldCover,
		})
	}
	if value, ok := nuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldSummary,
		})
	}
	_node = &Novel{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
