// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vicanso/elite/ent/novel"
)

// Novel is the model entity for the Novel schema.
type Novel struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间，添加记录时由程序自动生成
	CreatedAt time.Time `json:"createdAt,omitempty" sql:"created_at"`
	// 更新时间，更新记录时由程序自动生成
	UpdatedAt time.Time `json:"updatedAt,omitempty" sql:"updated_at"`
	// 小说名称
	Name string `json:"name,omitempty"`
	// 小说作者
	Author string `json:"author,omitempty"`
	// 小说来源
	Source int `json:"source,omitempty"`
	// 小说状态
	Status int `json:"status,omitempty"`
	// 小说总字数
	WordCount int `json:"wordCount,omitempty" sql:"word_count"`
	// 小说阅读次数
	Views int `json:"views,omitempty"`
	// 小说下载次数
	Downloads int `json:"downloads,omitempty"`
	// 小说收藏次数
	Favorites int `json:"favorites,omitempty"`
	// 小说更新权重
	UpdatedWeight int `json:"updatedWeight,omitempty" sql:"updated_weight"`
	// 小说封面
	Cover string `json:"cover,omitempty"`
	// 小说简介
	Summary string `json:"summary,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Novel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novel.FieldID, novel.FieldSource, novel.FieldStatus, novel.FieldWordCount, novel.FieldViews, novel.FieldDownloads, novel.FieldFavorites, novel.FieldUpdatedWeight:
			values[i] = &sql.NullInt64{}
		case novel.FieldName, novel.FieldAuthor, novel.FieldCover, novel.FieldSummary:
			values[i] = &sql.NullString{}
		case novel.FieldCreatedAt, novel.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Novel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Novel fields.
func (n *Novel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case novel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case novel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case novel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case novel.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				n.Author = value.String
			}
		case novel.FieldSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				n.Source = int(value.Int64)
			}
		case novel.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				n.Status = int(value.Int64)
			}
		case novel.FieldWordCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field word_count", values[i])
			} else if value.Valid {
				n.WordCount = int(value.Int64)
			}
		case novel.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				n.Views = int(value.Int64)
			}
		case novel.FieldDownloads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field downloads", values[i])
			} else if value.Valid {
				n.Downloads = int(value.Int64)
			}
		case novel.FieldFavorites:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field favorites", values[i])
			} else if value.Valid {
				n.Favorites = int(value.Int64)
			}
		case novel.FieldUpdatedWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_weight", values[i])
			} else if value.Valid {
				n.UpdatedWeight = int(value.Int64)
			}
		case novel.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				n.Cover = value.String
			}
		case novel.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				n.Summary = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Novel.
// Note that you need to call Novel.Unwrap() before calling this method if this Novel
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Novel) Update() *NovelUpdateOne {
	return (&NovelClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Novel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Novel) Unwrap() *Novel {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Novel is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Novel) String() string {
	var builder strings.Builder
	builder.WriteString("Novel(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(n.Name)
	builder.WriteString(", author=")
	builder.WriteString(n.Author)
	builder.WriteString(", source=")
	builder.WriteString(fmt.Sprintf("%v", n.Source))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", n.Status))
	builder.WriteString(", word_count=")
	builder.WriteString(fmt.Sprintf("%v", n.WordCount))
	builder.WriteString(", views=")
	builder.WriteString(fmt.Sprintf("%v", n.Views))
	builder.WriteString(", downloads=")
	builder.WriteString(fmt.Sprintf("%v", n.Downloads))
	builder.WriteString(", favorites=")
	builder.WriteString(fmt.Sprintf("%v", n.Favorites))
	builder.WriteString(", updated_weight=")
	builder.WriteString(fmt.Sprintf("%v", n.UpdatedWeight))
	builder.WriteString(", cover=")
	builder.WriteString(n.Cover)
	builder.WriteString(", summary=")
	builder.WriteString(n.Summary)
	builder.WriteByte(')')
	return builder.String()
}

// Novels is a parsable slice of Novel.
type Novels []*Novel

func (n Novels) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
